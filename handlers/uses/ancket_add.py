from loader import bot, dp, CallbackQuery, Message
from editor_photo import add_text_to_photo

from keyboards.keyboards import Floor, Ancketa_main, Hobbies
from userdata.func_sql import add_user
from locales.translate import translate_start

from imports import FSMContext, State, StatesGroup, ContentType
from imports import Nominatim, Location, os, asyncio


class CreateAncketStates(StatesGroup):
    NAME = State()
    AGE = State()
    GENDER = State()
    SEARCH_GENDER= State()
    DESCRIPTION = State()
    HOBBIES = State()
    LOCATION = State()
    LOCATION_INPUT = State()
    LOCATION_SEARCH = State()
    PHOTO = State()


@dp.callback_query_handler(lambda c: c.data == 'create_ancket')
async def ancketa_create_user(callback_query: CallbackQuery):
    await callback_query.message.delete()
    await bot.send_message(callback_query.from_user.id, "<i>–Ø –∑–∞–≤–∂–¥–∏ –≤—ñ—Ä—é –≤ –ø–µ—Ä—à–µ –≤—Ä–∞–∂–µ–Ω–Ω—è, —Ç–æ–∂ –¥–∞–≤–∞–π –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å: —è Flirtify, –∞ —Ç–∏?üòá</i>")
    await CreateAncketStates.NAME.set()


@dp.message_handler(state=CreateAncketStates.NAME)
async def process_name(message: Message, state: FSMContext):
    async with state.proxy() as data:
        if len(message.text) >= 2:
            data['name'] = message.text
            data['username'] = message.from_user.username

            await message.answer("<i>–Ø–∫ –∫–∞–∂—É—Ç—å, –≤—ñ–∫ ‚Äì —Ü–µ –ª–∏—à–µ —á–∏—Å–ª–æ. –ê–ª–µ –¥–ª—è –Ω–∞—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É –≤—ñ–∫ –º–æ–∂–µ –±—É—Ç–∏ –∫–ª—é—á–æ–≤–∏–º —Ñ–∞–∫—Ç–æ—Ä–æ–º! üòèüîë</i>")
            await CreateAncketStates.AGE.set()
            await message.delete()
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)

        else:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
            await bot.send_message(message.from_user.id, "<i>–Ø –ø–æ–º—ñ—Ç–∏–≤, —â–æ —É —Ç–µ–±–µ —Ç–∞–∫–µ –∫–æ—Ä–æ—Ç–∫–µ —ñ–º'—è, –ª–∏—à–µ 1 —Å–∏–º–≤–æ–ª? ü§î –ù–µ –∂–∞—Ä—Ç—É–π, –¥–∞–≤–∞–π –Ω–∞–ø–∏—à–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –¥–∞–≤–∞–π –¥–æ–¥–∞–º–æ —â–µ —Ç—Ä–æ—Ö–∏ –±—É–∫–≤–æ—á–æ–∫ —É —Ü–µ –≤–∏–±—É—Ö–æ–≤–µ –ø–æ—î–¥–Ω–∞–Ω–Ω—è! üí•üòâ</i>")            

@dp.message_handler(state=CreateAncketStates.AGE)
async def process_age(message: Message, state: FSMContext):
    async with state.proxy() as data:
        if not message.text.isdigit():
            await bot.send_message(message.from_user.id, "<i>–Ø —Ä–æ–∑—É–º—ñ—é, —â–æ –ª—ñ—Ç–µ—Ä–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –¥—É–∂–µ –ø—Ä–∏–≤–∞–±–ª–∏–≤–∏–º–∏, –∞–ª–µ –≤ —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É —Ü–∏—Ñ—Ä–∏ –±—É–ª–∏ –± –¥–æ—Ä–µ—á–Ω—ñ—à–∏–º–∏ ü§îüòâ</i>")
		
        else:
            age = int(message.text)
            if 14 <= age <= 45:
                data['age'] = str(age)

                menu = Floor()
        	    
                await message.answer("<i>–ú–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ–º–æ –∑–Ω–∞—Ç–∏, –∑ –∫–∏–º –º–∞—î–º–æ —Å–ø—Ä–∞–≤—É: –º–∞—á–æ —á–∏ –ø—Ä–∏–Ω—Ü–µ—Å–∞?üí™üë∏</i>", reply_markup = await menu.get_menu_keyboard())
                await CreateAncketStates.GENDER.set()
                await message.delete()
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)

            else:
                await bot.send_message(message.from_user.id, "<i>–í—ñ–¥ 14 –¥–æ 45 —Ä–æ–∫—ñ–≤ ‚Äì –º–µ–∂—ñ –Ω–∞—à–æ–≥–æ –±–æ—Ç-—Ç—É—Å–æ–≤–Ω–∏–∫–∞! üéâ</i>")


@dp.callback_query_handler(state=CreateAncketStates.GENDER)
async def process_gender(callback_query: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['gender'] = callback_query.data

        menu = Floor()
        await callback_query.message.edit_text("üîç –•–æ—á–µ—à, —â–æ–± —è —Ä–æ–∑–∫—Ä–∏–≤ —Ç–≤–æ—ó —É–ø–æ–¥–æ–±–∞–Ω–Ω—è? –†–æ–∑–∫–∞–∂–∏ –º–µ–Ω—ñ, —è–∫–∞ —Å—Ç–∞—Ç—å —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞, —ñ —è –∑—Ä–æ–±–ª—é –≤—Å–µ –º–æ–∂–ª–∏–≤–µ! üòè", reply_markup = await menu.get_menu_keyboard())
        await CreateAncketStates.SEARCH_GENDER.set()


@dp.callback_query_handler(state=CreateAncketStates.SEARCH_GENDER)
async def search_gender(callback_query: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['search_gender'] = callback_query.data

        await bot.send_message(callback_query.from_user.id, "<i>–ú–µ–Ω—ñ –∑–¥–∞—î—Ç—å—Å—è, –≤–∏ –¥—É–∂–µ —Ü—ñ–∫–∞–≤–∞ –æ—Å–æ–±–∞. –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–≤–Ω–∏–º–æ –æ–ø–∏—Å, —â–æ–± —è –±—É–≤ —É —Ü—å–æ–º—É –≤–ø–µ–≤–Ω–µ–Ω–∏–π üòÑüìù</i>")
        await callback_query.message.delete()
        await CreateAncketStates.DESCRIPTION.set()


@dp.message_handler(state=CreateAncketStates.DESCRIPTION)
async def process_description(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text

        hobbies = Hobbies()
        await bot.send_message(message.from_user.id, "<i>–Ø —á—É–≤, —â–æ —Ö–æ–±—ñ - —Ü–µ —Ç–µ, —â–æ —Ç–∏ —Ä–æ–±–∏—à —ñ–∑ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è–º, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –Ω—ñ—Ö—Ç–æ –Ω–µ –¥–∏–≤–∏—Ç—å—Å—è. \n–¢–æ —â–æ, —è–∫–µ —Ç–≤–æ—î —Ö–æ–±—ñ? üòâ</i>", reply_markup = await hobbies.get_menu_hobbies_choose())
        await message.delete()
        await CreateAncketStates.HOBBIES.set()
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ö–æ–±–±–∏
@dp.callback_query_handler(lambda query: query.data.startswith('category_'), state=CreateAncketStates.HOBBIES)
async def process_hobby_category(callback_query: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query_id=callback_query.id)

    category = callback_query.data.split('_')[1]
    hobbies = Hobbies()
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é —Å —Ö–æ–±–±–∏
    if category == 'it':
        await callback_query.message.edit_text("<i>üëæ –û–≥–æ, –≤–∂–µ –∑–Ω–∞—Ö–æ–¥–∏—à—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó IT/–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó! –Ø –≤–ø–µ–≤–Ω–µ–Ω–∏–π, —Ç–∏ –∑–Ω–∞–π–¥–µ—à —Ç—É—Ç —â–æ—Å—å —Ü—ñ–∫–∞–≤–µ, —Ç–∞–∫ —Å–∞–º–æ —è–∫ —ñ –º–µ–Ω–µ üòâüíª</i>", reply_markup= await hobbies.get_menu_hobbies_it())
    elif category == 'sport':
        await callback_query.message.edit_text("<i>üî• –í–∏–±–µ—Ä–∏ —Å–≤–æ—î —Å–ø–æ—Ä—Ç–∏–≤–Ω–µ —Ö–æ–±—ñ! –ß–∏ –∑–Ω–∞—î—à, —â–æ —Å–ø–æ—Ä—Ç –ø—ñ–¥–Ω—ñ–º–∞—î –Ω–µ —Ç—ñ–ª—å–∫–∏ –Ω–∞—Å—Ç—Ä—ñ–π, –∞–ª–µ –π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É? üòè –û–±–µ—Ä–∏ —Å–ø–æ—Ä—Ç, —è–∫–∏–π —Ç–æ–±—ñ –¥–æ –≤–ø–æ–¥–æ–±–∏, —ñ –º–∏ –∑–Ω–∞–π–¥–µ–º–æ —Ç–æ–±—ñ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞, –∑ —è–∫–∏–º —Ç–∏ –∑–º–æ–∂–µ—à —Å–ø–∞–ª–∏—Ç–∏ –∑–∞–π–≤—ñ –∫–∞–ª–æ—Ä—ñ—ó! üí™üî•</i>", reply_markup= await hobbies.get_menu_hobbies_sport())
    elif category == 'cooking':
        await callback_query.message.edit_text("<i>üç≥ –û–π, –æ—Å–∫—ñ–ª—å–∫–∏ –º–∏ —Ä–æ–∑–º–æ–≤–ª—è—î–º–æ –ø—Ä–æ –∫—É–ª—ñ–Ω–∞—Ä—ñ—é, –¥–æ–∑–≤–æ–ª—å –º–µ–Ω—ñ —Ä–æ–∑–ø–∞–ª–∏—Ç–∏ —Ç–≤–æ—ó –∫—É–ª—ñ–Ω–∞—Ä–Ω—ñ —Ñ–∞–Ω—Ç–∞–∑—ñ—ó! üòèüî• –û–±–µ—Ä–∏ –∫—É–ª—ñ–Ω–∞—Ä–Ω–∏–π —à–ª—è—Ö, –∞ —è –ø–æ–∫–∞–∂—É —Ç–æ–±—ñ, —â–æ –ø–æ–¥—ñ–±–Ω—ñ—Å—Ç—å –≤ —Å–º–∞–∫–∞—Ö –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É! üíï</i>", reply_markup= await hobbies.get_menu_hobbies_cooking())
    elif category == 'creativity':
        await callback_query.message.edit_text("<i>üé® –û—Ö, –º–∏ –¥—ñ–π—à–ª–∏ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¢–≤–æ—Ä—á—ñ—Å—Ç—å —Ç–∞ –ú–∏—Å—Ç–µ—Ü—Ç–≤–æ! –¢—É—Ç –Ω–∞—à–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –º–æ–∂–µ —Å—Ç–∞—Ç–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ–º –º–∏—Å—Ç–µ—Ü—Ç–≤–æ–º, –∞ —Ç–≤–æ—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞—Ü—ñ–∫–∞–≤–∏—Ç—å –º–µ–Ω–µ —â–µ –±—ñ–ª—å—à–µ! üòèüí´</i>", reply_markup= await hobbies.get_menu_hobbies_creativity())
    elif category == 'back':
        await callback_query.message.edit_text("<i>–Ø —á—É–≤, —â–æ —Ö–æ–±—ñ - —Ü–µ —Ç–µ, —â–æ —Ç–∏ —Ä–æ–±–∏—à —ñ–∑ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è–º, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –Ω—ñ—Ö—Ç–æ –Ω–µ –¥–∏–≤–∏—Ç—å—Å—è. \n–¢–æ —â–æ, —è–∫–µ —Ç–≤–æ—î —Ö–æ–±—ñ? üòâ</i>", reply_markup = await hobbies.get_menu_hobbies_choose())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    async with state.proxy() as data:
        data['category'] = category


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ö–æ–±–±–∏
@dp.callback_query_handler(lambda query: query.data.startswith('hobby_'), state=CreateAncketStates.HOBBIES)
async def process_hobby_selection(callback_query: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query_id=callback_query.id)
    hobby = callback_query.data.split('_')[1]
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    async with state.proxy() as data:
        data['hobby'] = hobby

    ancketa_main = Ancketa_main("uk")
    await callback_query.message.edit_text("<i>üåç –ú–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫, —è–∫ –º–∏ –¥—ñ–∑–Ω–∞—î–º–æ—Å—è, –¥–µ —Ç–∏? –í–∏–±–∏—Ä–∞–π:\n 1)–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é GPS \n2)–ß–∏ –≤—Ä—É—á–Ω—É! üó∫Ô∏èüîç</i>", reply_markup = await ancketa_main.get_menu_choice_location())


@dp.callback_query_handler(lambda c: c.data and c.data.startswith(('btn1', 'btn2')), state=CreateAncketStates.HOBBIES)
async def choice_location(callback_query: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query_id=callback_query.id)
    if callback_query.data.startswith("btn1"):
        await callback_query.message.delete()

        key_location = Ancketa_main("uk")
        
        await bot.send_message(callback_query.from_user.id, "<i>üåç –ê–∫—Ç–∏–≤—É–π —Å–≤—ñ–π GPS-–ø—Ä–∏–π–º–∞—á —ñ —Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –º–∏ –∑–Ω–∞–π—à–ª–∏ —Ç–µ–±–µ! üìçüõ∞Ô∏è</i>", reply_markup = await key_location.get_menu_keyboard_ancketa_location())
        await CreateAncketStates.LOCATION.set()

    elif callback_query.data.startswith("btn2"):
        await callback_query.message.delete()

        await bot.send_message(callback_query.from_user.id, "<i>üèôÔ∏è –¢–∏ –Ω–∞—à —Å—É–ø–µ—Ä–≥–µ–æ–≥—Ä–∞—Ñ! –í–≤–µ–¥–∏ —Å–≤–æ—î –º—ñ—Å—Ç–æ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ —ñ –¥–∞–π –Ω–∞–º –∑–Ω–∞—Ç–∏, –¥–µ —Ç–µ–±–µ –º–æ–∂–Ω–∞ –∑—É—Å—Ç—Ä—ñ—Ç–∏ –Ω–∞ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∏–π –ø–æ—Ü—ñ–ª—É–Ω–æ–∫! üòòüåÜ</i>")
        await CreateAncketStates.LOCATION_INPUT.set()


@dp.message_handler(content_types=[ContentType.LOCATION], state=CreateAncketStates.LOCATION)
async def process_location(message: Message, state: FSMContext):
    location = message.location
    async with state.proxy() as data:
        if 'location' in data and data['location'] is not None:
            data['location'].latitude = location.latitude
            data['location'].longitude = location.longitude
        else:
            data['location'] = Location(latitude=location.latitude, longitude=location.longitude)

        geolocator = Nominatim(user_agent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36")
        location_info = geolocator.reverse(f"{location.latitude}, {location.longitude}", exactly_one=True, timeout=10)
        location_send_info = location_info.raw.get('address', {}).get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        data['location'] = location_send_info

        if location_send_info == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
            await bot.send_message(message.from_user.id, '–•–º, –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–≤–æ—î –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è, —Ç–æ–º—É, –≤–≤–µ–¥–∏ –π–æ–≥–æ –Ω–∏–∂—á–µ')
            await CreateAncketStates.LOCATION_INPUT.set()

        else:
            await bot.send_message(message.chat.id, "<i>–•–º, —è–∫–µ –º—ñ—Å—Ç–æ –≤–∏ —Ö–æ—Ç—ñ–ª–∏ –± –¥–æ—Å–ª—ñ–¥–∏—Ç–∏ —É –ø–æ—à—É–∫–∞—Ö –Ω–æ–≤–∏—Ö –ª—é–¥–µ–π?üåÉüòè</i>")
            await CreateAncketStates.LOCATION_SEARCH.set()
            await message.delete()
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)


@dp.message_handler(state=CreateAncketStates.LOCATION_INPUT)
async def process_location_input(message: Message, state: FSMContext):
    async with state.proxy() as data:
        location_text = message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—É–∫–≤—ã "—ã" –≤ —Å—Ç—Ä–æ–∫–µ –∏ –∑–∞–º–µ–Ω—è–µ–º –µ—ë –Ω–∞ "–∏"
        if '—ã' in location_text:
            location_text = location_text.replace('—ã', '–∏')

        data['location'] = location_text  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    await bot.send_message(message.from_user.id, "<i>–ù–∞ —è–∫–µ –º—ñ—Å—Ç–æ –º–∏ –ø–æ—ó–¥–µ–º–æ —à—É–∫–∞—Ç–∏ –≤–∞–º –Ω–æ–≤–∏—Ö –∑–Ω–∞–π–æ–º–∏—Ö? ü§óüèôÔ∏è</i>")
    await CreateAncketStates.LOCATION_SEARCH.set()
    await message.delete()
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)


@dp.message_handler(state=CreateAncketStates.LOCATION_SEARCH)
async def process_location_search(message: Message, state: FSMContext):
    async with state.proxy() as data:
        location_search = message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—É–∫–≤—ã "—ã" –≤ —Å—Ç—Ä–æ–∫–µ –∏ –∑–∞–º–µ–Ω—è–µ–º –µ—ë –Ω–∞ "–∏"
        if '—ã' in location_search:
            location_search = location_search.replace('—ã', '–∏')

        data['location_search'] = location_search  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    await bot.send_message(message.from_user.id, "<i>–®–≤–∏–¥—à–µ –∑–∞ –≤—Å–µ, —Ç–∏ –Ω–∞–π–∫—Ä–∞—Å–∏–≤—ñ—à–∞ –ª—é–¥–∏–Ω–∞ —É —Å–≤—ñ—Ç—ñ, –∞–ª–µ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è. –ù–∞–¥—Å–∏–ª–∞–π —Å–≤–æ—î —Ñ–æ—Ç–æ!ü§©</i>")
    await CreateAncketStates.PHOTO.set()
    await message.delete()
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
@dp.message_handler(state=CreateAncketStates.PHOTO, content_types=['photo'])
async def process_photo(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ id —Ñ–æ—Ç–æ
    user_id = message.from_user.id
    
    photo_id = message.photo[-1].file_id
    photo = await bot.get_file(photo_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ file_path
    file_extension = os.path.splitext(photo.file_path)[-1]
    
    photo_path = os.path.join("photo_users", f"{user_id}{file_extension}")
    await photo.download(destination_file=photo_path)
        
    async with state.proxy() as data:
        data['photo'] = photo_id
        data['photo_path'] = photo_path
        await save_user_data(user_id, data)
        await state.finish()
        await message.delete()
        await bot.delete_message(message.chat.id, message.message_id - 1)


async def save_user_data(user_id, data):
    try:
        loop = asyncio.get_event_loop()
        task = loop.create_task(add_text_to_photo(data.get('photo_path'), ))
        await task

        photo = task.result()

        if photo:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            name = data.get('name')
            username = data['username']
            age = data.get('age')
            gender = data.get('gender')
            search_gender = data.get('search_gender')
            description = data.get('description')
            hobbies = data.get('hobby')
            location = data.get('location')
            location_search = data.get('location_search')
            photo_path = photo
            languages = "uk"

            loop = asyncio.get_event_loop()
            task = loop.create_task(add_user(user_id, username, name, age, gender, search_gender, description, hobbies, location, location_search, photo_path,languages, ))
            await task

    except Exception as e:
        print(e)

    finally:
        # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        menu_ancketa = Ancketa_main("uk")
        await bot.send_message(user_id, "<i>–£—Ä–∞! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —Ç–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –ø—ñ–¥–∫–æ—Ä–µ–Ω–Ω—è —Å–µ—Ä–¥–µ—Ü—å!‚ù§Ô∏èüòâ</i>", reply_markup = await menu_ancketa.get_menu_keyboard_ancketa())
        